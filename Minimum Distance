Problem Description

Given a string A which contains only three characters {'x', 'o', '.'}.

Find minimum possible distance between any pair of 'x' and 'o' in the string.

Distance is defined as the absolute difference between the index of 'x' and 'o'.

NOTE: If there is no such pair return -1.



Problem Constraints

1 <= |A| <= 105



Input Format

First and only argument is a string A.



Output Format

Return an integer denoting the minimum possible distance.



Example Input

Input 1:

 A = "x...o.x...o"
Input 2:

 A = "xxx...xxx"


Example Output

Output 1:

 2
Output 2:

 -1


Example Explanation

Explanation 1:

 Minimum distance is between 'o' at index 5 and 'x' at index 7 i.e |7 - 5| = 2
Explanation 2:

 There is no such pair, return -1.
 
 
 Answer:
 public class Solution {
    public int solve(String A) {
        ArrayList<Integer> X = new ArrayList<Integer>();
		ArrayList<Integer> O = new ArrayList<Integer>();
		ArrayList<Integer> finall = new ArrayList<Integer>();
    		    for(int i=0;i<A.length();i++)
        		{
        		    if(A.charAt(i)=='x')
        		    {
        		        X.add(i);
        		    }
        		    else if(A.charAt(i)=='o')
        		    {
        		        O.add(i);
        		    }
        		}
        		for(int a=0;a<X.size();a++)
            		{
            		    for(int b=0;b<O.size();b++)
            		    {
            		        int diff = Math.abs(O.get(b)-X.get(a));
            		        finall.add(diff);
            		        
            		    }
            		}
		if(finall.size()!=0)
		{
		int ans = Collections.min(finall);
		return ans;
		}
		else
		{
		   return -1; 
		}		
    }
}

