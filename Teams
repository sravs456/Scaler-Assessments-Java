Given a string A, A is made up of 0's and 1's. Break A into substrings such that , all broken substrings have equal number of 1's and 0's.

Find and return maximum number of substrings in which A can be broken.


Input Format

The only argument given is string A.
Output Format

Find and return maximum number of substrings in which A can be broken.
Constraints

1 <= length of A <= 10^5
A will always have equal number of 0's and 1's
For Example

Input 1:
    A = "011100"
Output 1:
    2
Explanation 1:
    "01" + "1100"

Input 2:
    A = "00011011"
Output 2:
    1
Explanation 2:
    "00011011"
    
Answer:

public class Solution {
public int solve(String A) 
{
int strSize = A.length();
int transformedArray[] = new int[strSize];
for(int i=0;i<strSize;i++) {
if(A.charAt(i)=='0') {
transformedArray[i] = 1;
} else {
transformedArray[i] = -1;
}
}
int ans =0;
int prefixSum =transformedArray[0];
for(int i = 1; i<strSize;i++) 
{
prefixSum+=transformedArray[i];
if(prefixSum==0) 
{
ans++;
}
}
return ans;
}
}
